public final class love/forte/simbot/common/PriorityConstant {
	public static final field DEFAULT I
	public static final field DE_PRIORITIZE_1 I
	public static final field DE_PRIORITIZE_2 I
	public static final field DE_PRIORITIZE_3 I
	public static final field DE_PRIORITIZE_4 I
	public static final field DE_PRIORITIZE_5 I
	public static final field DE_PRIORITIZE_6 I
	public static final field DE_PRIORITIZE_7 I
	public static final field DE_PRIORITIZE_8 I
	public static final field DE_PRIORITIZE_9 I
	public static final field INSTANCE Llove/forte/simbot/common/PriorityConstant;
	public static final field PRIORITIZE_1 I
	public static final field PRIORITIZE_2 I
	public static final field PRIORITIZE_3 I
	public static final field PRIORITIZE_4 I
	public static final field PRIORITIZE_5 I
	public static final field PRIORITIZE_6 I
	public static final field PRIORITIZE_7 I
	public static final field PRIORITIZE_8 I
	public static final field PRIORITIZE_9 I
}

public final class love/forte/simbot/common/async/Async {
	public fun <init> (Lkotlinx/coroutines/Deferred;)V
	public final fun asFuture ()Ljava/util/concurrent/CompletableFuture;
	public final fun cancel ()V
	public final fun cancelBy (Ljava/util/concurrent/CancellationException;)V
	public final fun getDeferred ()Lkotlinx/coroutines/Deferred;
	public final fun handle (Llove/forte/simbot/common/function/Action;)Lkotlinx/coroutines/DisposableHandle;
	public final fun isActive ()Z
	public final fun isCancelled ()Z
	public final fun isCompleted ()Z
	public final fun onCancellation (Llove/forte/simbot/common/function/Action;)Lkotlinx/coroutines/DisposableHandle;
	public final fun onCompletion (Llove/forte/simbot/common/function/Action;)Lkotlinx/coroutines/DisposableHandle;
	public final fun onError (Llove/forte/simbot/common/function/Action;)Lkotlinx/coroutines/DisposableHandle;
}

public abstract interface class love/forte/simbot/common/async/AsyncHandler {
	public abstract fun invoke (Ljava/lang/Throwable;)V
}

public final class love/forte/simbot/common/async/AsyncUtil {
	public static final fun asAsync (Ljava/util/concurrent/CompletableFuture;)Llove/forte/simbot/common/async/Async;
	public static final fun asAsync (Lkotlinx/coroutines/Deferred;)Llove/forte/simbot/common/async/Async;
	public static final synthetic fun await (Llove/forte/simbot/common/async/Async;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun cancelBy (Llove/forte/simbot/common/async/Async;Ljava/lang/String;Ljava/lang/Throwable;)V
	public static synthetic fun cancelBy$default (Llove/forte/simbot/common/async/Async;Ljava/lang/String;Ljava/lang/Throwable;ILjava/lang/Object;)V
	public static final fun completedAsync (Ljava/lang/Object;)Llove/forte/simbot/common/async/Async;
	public static final fun getOnAwait (Llove/forte/simbot/common/async/Async;)Lkotlinx/coroutines/selects/SelectClause1;
	public static final fun getOnJoin (Llove/forte/simbot/common/async/Async;)Lkotlinx/coroutines/selects/SelectClause0;
	public static final synthetic fun join (Llove/forte/simbot/common/async/Async;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun toAsync (Lkotlinx/coroutines/CoroutineScope;Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/async/Async;
}

public abstract interface class love/forte/simbot/common/async/CancellationHandler {
	public abstract fun invoke (Ljava/util/concurrent/CancellationException;)V
}

public abstract interface class love/forte/simbot/common/async/CompletionHandler {
	public abstract fun invoke (Ljava/lang/Object;)V
}

public abstract interface class love/forte/simbot/common/async/ErrorHandler {
	public abstract fun invoke (Ljava/lang/Throwable;)V
}

public final class love/forte/simbot/common/attribute/Attribute {
	public static final field Companion Llove/forte/simbot/common/attribute/Attribute$Companion;
	public synthetic fun <init> (Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public static final fun of (Ljava/lang/String;)Llove/forte/simbot/common/attribute/Attribute;
	public fun toString ()Ljava/lang/String;
}

public synthetic class love/forte/simbot/common/attribute/Attribute$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public fun <init> (Lkotlinx/serialization/KSerializer;)V
	public final fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public final fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/attribute/Attribute;
	public final fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public final fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/attribute/Attribute;)V
	public final fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class love/forte/simbot/common/attribute/Attribute$Companion {
	public final fun of (Ljava/lang/String;)Llove/forte/simbot/common/attribute/Attribute;
	public final fun serializer (Lkotlinx/serialization/KSerializer;)Lkotlinx/serialization/KSerializer;
}

public abstract interface class love/forte/simbot/common/attribute/AttributeMap {
	public static final field Companion Llove/forte/simbot/common/attribute/AttributeMap$Companion;
	public abstract fun contains (Llove/forte/simbot/common/attribute/Attribute;)Z
	public static fun create ()Llove/forte/simbot/common/attribute/AttributeMap;
	public static fun create (Ljava/util/Map;)Llove/forte/simbot/common/attribute/AttributeMap;
	public abstract fun get (Llove/forte/simbot/common/attribute/Attribute;)Ljava/lang/Object;
	public abstract fun getEntries ()Ljava/util/Set;
	public abstract fun safeGet (Llove/forte/simbot/common/attribute/Attribute;)Ljava/lang/Object;
	public abstract fun size ()I
}

public final class love/forte/simbot/common/attribute/AttributeMap$Companion {
	public final fun create ()Llove/forte/simbot/common/attribute/AttributeMap;
	public final fun create (Ljava/util/Map;)Llove/forte/simbot/common/attribute/AttributeMap;
	public static synthetic fun create$default (Llove/forte/simbot/common/attribute/AttributeMap$Companion;Ljava/util/Map;ILjava/lang/Object;)Llove/forte/simbot/common/attribute/AttributeMap;
}

public abstract interface class love/forte/simbot/common/attribute/AttributeMapContainer {
	public abstract fun getAttributeMap ()Llove/forte/simbot/common/attribute/AttributeMap;
}

public final class love/forte/simbot/common/attribute/Attributes {
	public static final fun attributeMapOf (Ljava/util/Map;)Llove/forte/simbot/common/attribute/AttributeMap;
	public static synthetic fun attributeMapOf$default (Ljava/util/Map;ILjava/lang/Object;)Llove/forte/simbot/common/attribute/AttributeMap;
	public static final fun mutableAttributeMapOf (Ljava/util/Map;)Llove/forte/simbot/common/attribute/MutableAttributeMap;
	public static synthetic fun mutableAttributeMapOf$default (Ljava/util/Map;ILjava/lang/Object;)Llove/forte/simbot/common/attribute/MutableAttributeMap;
	public static final fun set (Llove/forte/simbot/common/attribute/MutableAttributeMap;Llove/forte/simbot/common/attribute/Attribute;Ljava/lang/Object;)V
}

public abstract interface class love/forte/simbot/common/attribute/MutableAttributeMap : love/forte/simbot/common/attribute/AttributeMap {
	public static final field Companion Llove/forte/simbot/common/attribute/MutableAttributeMap$Companion;
	public abstract fun computeIfAbsent (Llove/forte/simbot/common/attribute/Attribute;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public abstract fun computeIfPresent (Llove/forte/simbot/common/attribute/Attribute;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public static fun create (Ljava/util/Map;)Llove/forte/simbot/common/attribute/MutableAttributeMap;
	public abstract fun getEntries ()Ljava/util/Set;
	public abstract fun merge (Llove/forte/simbot/common/attribute/Attribute;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public abstract fun put (Llove/forte/simbot/common/attribute/Attribute;Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun remove (Llove/forte/simbot/common/attribute/Attribute;)Ljava/lang/Object;
	public abstract fun safeComputeIfAbsent (Llove/forte/simbot/common/attribute/Attribute;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public abstract fun safeComputeIfPresent (Llove/forte/simbot/common/attribute/Attribute;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public abstract fun safeMerge (Llove/forte/simbot/common/attribute/Attribute;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
	public abstract fun safePut (Llove/forte/simbot/common/attribute/Attribute;Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun safeRemove (Llove/forte/simbot/common/attribute/Attribute;)Ljava/lang/Object;
}

public final class love/forte/simbot/common/attribute/MutableAttributeMap$Companion {
	public final fun create (Ljava/util/Map;)Llove/forte/simbot/common/attribute/MutableAttributeMap;
	public static synthetic fun create$default (Llove/forte/simbot/common/attribute/MutableAttributeMap$Companion;Ljava/util/Map;ILjava/lang/Object;)Llove/forte/simbot/common/attribute/MutableAttributeMap;
}

public final class love/forte/simbot/common/attribute/MutableAttributeMapImpl$inlined$sam$i$java_util_function_BiFunction$0 : java/util/function/BiFunction {
	public fun <init> (Lkotlin/jvm/functions/Function2;)V
	public final synthetic fun apply (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class love/forte/simbot/common/attribute/MutableAttributeMapImpl$inlined$sam$i$java_util_function_Function$0 : java/util/function/Function {
	public fun <init> (Lkotlin/jvm/functions/Function1;)V
	public final synthetic fun apply (Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class love/forte/simbot/common/collectable/Collectable {
	public abstract fun asFlow ()Lkotlinx/coroutines/flow/Flow;
	public abstract synthetic fun collect (Llove/forte/simbot/common/function/Action;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun collectAsync (Lkotlinx/coroutines/CoroutineScope;Llove/forte/simbot/common/function/Action;)Llove/forte/simbot/common/async/Async;
	public fun transform (Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Llove/forte/simbot/suspendrunner/reserve/SuspendReserve$Transformer;)Ljava/lang/Object;
	public fun transform (Llove/forte/simbot/suspendrunner/reserve/SuspendReserve$Transformer;)Ljava/lang/Object;
}

public final class love/forte/simbot/common/collectable/Collectables {
	public static final fun asFlowSynchronouslyIterateCollectable (Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;)Llove/forte/simbot/common/collectable/FlowSynchronouslyIterateCollectable;
	public static final fun asFlux (Llove/forte/simbot/common/collectable/Collectable;)Lreactor/core/publisher/Flux;
	public static final fun asStream (Llove/forte/simbot/common/collectable/Collectable;)Ljava/util/stream/Stream;
	public static final fun asStream (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;)Ljava/util/stream/Stream;
	public static final fun asStream (Llove/forte/simbot/common/collectable/IterableCollectable;)Ljava/util/stream/Stream;
	public static final fun asStream (Llove/forte/simbot/common/collectable/SequenceCollectable;)Ljava/util/stream/Stream;
	public static synthetic fun asStream$default (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;ILjava/lang/Object;)Ljava/util/stream/Stream;
	public static final fun asSynchronouslyIterateCollectable (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;)Llove/forte/simbot/common/collectable/SynchronouslyIterateCollectable;
	public static final fun collect (Llove/forte/simbot/common/collectable/Collectable;Ljava/util/stream/Collector;)Ljava/lang/Object;
	public static final fun collectAsync (Llove/forte/simbot/common/collectable/Collectable;Ljava/util/stream/Collector;)Ljava/util/concurrent/CompletableFuture;
	public static final fun collectAsync (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;Ljava/util/stream/Collector;)Ljava/util/concurrent/CompletableFuture;
	public static synthetic fun collectAsync$default (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;Ljava/util/stream/Collector;ILjava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
	public static final synthetic fun collectBy (Lkotlinx/coroutines/flow/Flow;Ljava/util/stream/Collector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final synthetic fun collectBy (Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Ljava/util/stream/Collector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun collectBy$default (Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Ljava/util/stream/Collector;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun emptyCollectable ()Llove/forte/simbot/common/collectable/Collectable;
	public static final fun flowCollectable (Lkotlin/jvm/functions/Function2;)Llove/forte/simbot/common/collectable/Collectable;
	public static final fun toList (Llove/forte/simbot/common/collectable/Collectable;)Ljava/util/List;
	public static final fun toListAsync (Llove/forte/simbot/common/collectable/Collectable;)Ljava/util/concurrent/CompletableFuture;
	public static final fun toListAsync (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;)Ljava/util/concurrent/CompletableFuture;
	public static synthetic fun toListAsync$default (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;ILjava/lang/Object;)Ljava/util/concurrent/CompletableFuture;
	public static final fun transform (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;Llove/forte/simbot/suspendrunner/reserve/SuspendReserve$Transformer;)Ljava/lang/Object;
	public static final fun transform (Llove/forte/simbot/common/collectable/Collectable;Llove/forte/simbot/suspendrunner/reserve/SuspendReserve$Transformer;)Ljava/lang/Object;
	public static synthetic fun transform$default (Llove/forte/simbot/common/collectable/Collectable;Lkotlinx/coroutines/CoroutineScope;Llove/forte/simbot/suspendrunner/reserve/SuspendReserve$Transformer;ILjava/lang/Object;)Ljava/lang/Object;
	public static final fun valueOf (Ljava/lang/Iterable;)Llove/forte/simbot/common/collectable/IterableCollectable;
	public static final fun valueOf (Ljava/util/stream/Stream;)Llove/forte/simbot/common/collectable/SequenceCollectable;
	public static final fun valueOf (Lkotlin/sequences/Sequence;)Llove/forte/simbot/common/collectable/SequenceCollectable;
	public static final fun valueOf (Lkotlinx/coroutines/flow/Flow;)Llove/forte/simbot/common/collectable/Collectable;
}

public abstract interface class love/forte/simbot/common/collectable/FlowSynchronouslyIterateCollectable : love/forte/simbot/common/collectable/SynchronouslyIterateCollectable {
	public abstract fun asFlow ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun collect (Llove/forte/simbot/common/function/Action;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun collectAsync (Lkotlinx/coroutines/CoroutineScope;Llove/forte/simbot/common/function/Action;)Llove/forte/simbot/common/async/Async;
	public abstract fun forEach (Llove/forte/simbot/common/function/Action;)V
	public abstract fun iterator ()Ljava/util/Iterator;
	public abstract fun iterator (Lkotlinx/coroutines/CoroutineScope;)Ljava/util/Iterator;
}

public abstract interface class love/forte/simbot/common/collectable/IterableCollectable : love/forte/simbot/common/collectable/SynchronouslyIterateCollectable {
	public fun asFlow ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun iterator ()Ljava/util/Iterator;
}

public abstract interface class love/forte/simbot/common/collectable/SequenceCollectable : java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker, love/forte/simbot/common/collectable/SynchronouslyIterateCollectable {
	public fun asFlow ()Lkotlinx/coroutines/flow/Flow;
	public abstract fun asSequence ()Lkotlin/sequences/Sequence;
	public fun iterator ()Ljava/util/Iterator;
}

public abstract interface class love/forte/simbot/common/collectable/SynchronouslyIterateCollectable : java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker, love/forte/simbot/common/collectable/Collectable {
	public synthetic fun collect (Llove/forte/simbot/common/function/Action;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun collect$suspendImpl (Llove/forte/simbot/common/collectable/SynchronouslyIterateCollectable;Llove/forte/simbot/common/function/Action;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun collectAsync (Lkotlinx/coroutines/CoroutineScope;Llove/forte/simbot/common/function/Action;)Llove/forte/simbot/common/async/Async;
	public abstract fun forEach (Llove/forte/simbot/common/function/Action;)V
	public abstract fun toList ()Ljava/util/List;
}

public final class love/forte/simbot/common/coroutines/CoroutineContexts {
	public static final fun mergeWith (Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;
}

public final class love/forte/simbot/common/coroutines/DispatchersUtil {
	public static final fun getIOOrDefault (Lkotlinx/coroutines/Dispatchers;)Lkotlinx/coroutines/CoroutineDispatcher;
	public static final fun getVirtual (Lkotlinx/coroutines/Dispatchers;)Lkotlinx/coroutines/CoroutineDispatcher;
	public static final fun getVirtualDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
	public static final fun getVirtualOrIO (Lkotlinx/coroutines/Dispatchers;)Lkotlinx/coroutines/CoroutineDispatcher;
	public static final fun getVirtualOrIODispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
}

public final class love/forte/simbot/common/coroutines/Jobs {
	public static final fun linkTo (Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/DisposableHandle;
	public static final fun linkTo (Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;
	public static synthetic fun linkTo$default (Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlinx/coroutines/DisposableHandle;
}

public final class love/forte/simbot/common/coroutines/LinkedParentJobCancellationException : java/util/concurrent/CancellationException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public fun getCause ()Ljava/lang/Throwable;
	public fun getMessage ()Ljava/lang/String;
}

public final class love/forte/simbot/common/exception/Exceptions_jvmKt {
	public static final fun initExceptionCause (Ljava/lang/Throwable;Ljava/lang/Throwable;)V
}

public abstract interface class love/forte/simbot/common/function/Action {
	public abstract fun invoke (Ljava/lang/Object;)V
}

public abstract interface class love/forte/simbot/common/function/Condition {
	public abstract fun invoke (Ljava/lang/Object;)Z
}

public abstract interface class love/forte/simbot/common/function/ConfigurerFunction {
	public abstract fun invoke (Ljava/lang/Object;)V
}

public final class love/forte/simbot/common/function/FunctionsKt {
	public static final fun invokeBy (Ljava/lang/Object;Llove/forte/simbot/common/function/ConfigurerFunction;)Ljava/lang/Object;
	public static final fun invokeWith (Llove/forte/simbot/common/function/ConfigurerFunction;Ljava/lang/Object;)V
	public static final fun plus (Llove/forte/simbot/common/function/ConfigurerFunction;Llove/forte/simbot/common/function/ConfigurerFunction;)Llove/forte/simbot/common/function/ConfigurerFunction;
	public static final fun toConfigurerFunction (Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/function/ConfigurerFunction;
}

public class love/forte/simbot/common/function/MergeableFactoriesConfigurator {
	public fun <init> (Ljava/util/Map;Ljava/util/Map;)V
	public final fun add (Llove/forte/simbot/common/function/MergeableFactory;Llove/forte/simbot/common/function/ConfigurerFunction;)V
	public final fun create (Ljava/lang/Object;Llove/forte/simbot/common/function/MergeableFactory;)Ljava/lang/Object;
	public final fun createAll (Ljava/lang/Object;)Ljava/util/List;
	public final fun createOrNull (Llove/forte/simbot/common/function/MergeableFactory;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class love/forte/simbot/common/function/MergeableFactoriesConfigurator$Configurer {
	public abstract fun invoke (Ljava/lang/Object;Ljava/lang/Object;)V
}

public abstract interface class love/forte/simbot/common/function/MergeableFactory {
	public fun create (Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun create (Ljava/lang/Object;Llove/forte/simbot/common/function/ConfigurerFunction;)Ljava/lang/Object;
	public abstract fun getKey ()Llove/forte/simbot/common/function/MergeableFactory$Key;
}

public abstract interface class love/forte/simbot/common/function/MergeableFactory$Key {
}

public final class love/forte/simbot/common/id/AsStringIDSerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/id/AsStringIDSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/id/StringID;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/id/ID;)V
}

public abstract class love/forte/simbot/common/id/ID : java/lang/Comparable {
	public static final field Companion Llove/forte/simbot/common/id/ID$Companion;
	public abstract fun copy ()Llove/forte/simbot/common/id/ID;
	public abstract fun equals (Ljava/lang/Object;)Z
	public abstract fun equalsExact (Ljava/lang/Object;)Z
	public abstract fun hashCode ()I
	public abstract fun toString ()Ljava/lang/String;
}

public final class love/forte/simbot/common/id/ID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public abstract interface annotation class love/forte/simbot/common/id/ID4J : java/lang/annotation/Annotation {
}

public abstract interface class love/forte/simbot/common/id/IDContainer {
	public abstract fun getId ()Llove/forte/simbot/common/id/ID;
}

public final class love/forte/simbot/common/id/Identifies {
	public static final fun getLiteral (Llove/forte/simbot/common/id/ID;)Ljava/lang/String;
	public static final fun of (I)Llove/forte/simbot/common/id/IntID;
	public static final fun of (J)Llove/forte/simbot/common/id/LongID;
	public static final fun of (Ljava/lang/CharSequence;)Llove/forte/simbot/common/id/StringID;
	public static final fun of (Ljava/lang/String;)Llove/forte/simbot/common/id/StringID;
	public static final fun ofUInt (I)Llove/forte/simbot/common/id/UIntID;
	public static final fun ofUInt (Ljava/lang/String;)Llove/forte/simbot/common/id/UIntID;
	public static final fun ofULong (J)Llove/forte/simbot/common/id/ULongID;
	public static final fun ofULong (Ljava/lang/String;)Llove/forte/simbot/common/id/ULongID;
	public static final fun toInt (Llove/forte/simbot/common/id/ID;)I
	public static final fun toInt (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)I
	public static synthetic fun toInt$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)I
	public static final fun toIntID (Llove/forte/simbot/common/id/ID;)Llove/forte/simbot/common/id/IntID;
	public static final fun toIntID (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/id/IntID;
	public static synthetic fun toIntID$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/simbot/common/id/IntID;
	public static final fun toIntOrNull (Llove/forte/simbot/common/id/ID;)Ljava/lang/Integer;
	public static final fun toIntOrNull (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Ljava/lang/Integer;
	public static synthetic fun toIntOrNull$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Integer;
	public static final fun toLong (Llove/forte/simbot/common/id/ID;)J
	public static final fun toLong (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)J
	public static synthetic fun toLong$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)J
	public static final fun toLongID (Llove/forte/simbot/common/id/ID;)Llove/forte/simbot/common/id/LongID;
	public static final fun toLongID (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/id/LongID;
	public static synthetic fun toLongID$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/simbot/common/id/LongID;
	public static final fun toLongOrNull (Llove/forte/simbot/common/id/ID;)Ljava/lang/Long;
	public static final fun toLongOrNull (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Ljava/lang/Long;
	public static synthetic fun toLongOrNull$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Long;
	public static final fun toUInt (Llove/forte/simbot/common/id/ID;)I
	public static final fun toUInt (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)I
	public static synthetic fun toUInt$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)I
	public static final fun toUIntID (Llove/forte/simbot/common/id/ID;)Llove/forte/simbot/common/id/UIntID;
	public static final fun toUIntID (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/id/UIntID;
	public static synthetic fun toUIntID$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/simbot/common/id/UIntID;
	public static final fun toUIntOrNull (Llove/forte/simbot/common/id/ID;)Lkotlin/UInt;
	public static final fun toUIntOrNull (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Lkotlin/UInt;
	public static synthetic fun toUIntOrNull$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlin/UInt;
	public static final fun toULong (Llove/forte/simbot/common/id/ID;)J
	public static final fun toULong (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)J
	public static synthetic fun toULong$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)J
	public static final fun toULongID (Llove/forte/simbot/common/id/ID;)Llove/forte/simbot/common/id/ULongID;
	public static final fun toULongID (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Llove/forte/simbot/common/id/ULongID;
	public static synthetic fun toULongID$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/simbot/common/id/ULongID;
	public static final fun toULongOrNull (Llove/forte/simbot/common/id/ID;)Lkotlin/ULong;
	public static final fun toULongOrNull (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;)Lkotlin/ULong;
	public static synthetic fun toULongOrNull$default (Llove/forte/simbot/common/id/ID;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlin/ULong;
	public static final fun uuid ()Llove/forte/simbot/common/id/UUID;
	public static final fun uuid (Ljava/util/Random;)Llove/forte/simbot/common/id/UUID;
	public static final fun uuid (Ljava/util/UUID;)Llove/forte/simbot/common/id/UUID;
	public static final fun uuid (Lkotlin/random/Random;)Llove/forte/simbot/common/id/UUID;
	public static synthetic fun uuid$default (Lkotlin/random/Random;ILjava/lang/Object;)Llove/forte/simbot/common/id/UUID;
}

public final class love/forte/simbot/common/id/IntID : love/forte/simbot/common/id/SignedNumericID {
	public static final field Companion Llove/forte/simbot/common/id/IntID$Companion;
	public synthetic fun <init> (ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun copy ()Llove/forte/simbot/common/id/ID;
	public fun copy ()Llove/forte/simbot/common/id/IntID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getValue ()I
	public fun hashCode ()I
	public fun toByte ()B
	public fun toDouble ()D
	public fun toFloat ()F
	public fun toInt ()I
	public fun toLong ()J
	public fun toShort ()S
	public fun toString ()Ljava/lang/String;
	public static final fun valueOf (I)Llove/forte/simbot/common/id/IntID;
}

public final class love/forte/simbot/common/id/IntID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (I)Llove/forte/simbot/common/id/IntID;
}

public final class love/forte/simbot/common/id/LongID : love/forte/simbot/common/id/SignedNumericID {
	public static final field Companion Llove/forte/simbot/common/id/LongID$Companion;
	public synthetic fun <init> (JLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun copy ()Llove/forte/simbot/common/id/ID;
	public fun copy ()Llove/forte/simbot/common/id/LongID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getValue ()J
	public fun hashCode ()I
	public fun toByte ()B
	public fun toDouble ()D
	public fun toFloat ()F
	public fun toInt ()I
	public fun toLong ()J
	public fun toShort ()S
	public fun toString ()Ljava/lang/String;
	public static final fun valueOf (J)Llove/forte/simbot/common/id/LongID;
}

public final class love/forte/simbot/common/id/LongID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (J)Llove/forte/simbot/common/id/LongID;
}

public final class love/forte/simbot/common/id/LongID$Serializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/id/LongID$Serializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/id/LongID;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/id/LongID;)V
}

public abstract class love/forte/simbot/common/id/NumericalID : love/forte/simbot/common/id/ID {
	public static final field Companion Llove/forte/simbot/common/id/NumericalID$Companion;
	protected abstract fun compareNumber (Llove/forte/simbot/common/id/NumericalID;)I
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public final fun compareTo (Llove/forte/simbot/common/id/ID;)I
	public abstract fun toByte ()B
	public abstract fun toDouble ()D
	public abstract fun toFloat ()F
	public abstract fun toInt ()I
	public abstract fun toLong ()J
	public abstract fun toShort ()S
	public fun toUInt-pVg5ArA ()I
	public fun toULong-s-VKNKU ()J
}

public final class love/forte/simbot/common/id/NumericalID$Companion {
}

public abstract class love/forte/simbot/common/id/SignedNumericID : love/forte/simbot/common/id/NumericalID {
}

public final class love/forte/simbot/common/id/StringID : love/forte/simbot/common/id/ID {
	public static final field Companion Llove/forte/simbot/common/id/StringID$Companion;
	public synthetic fun <init> (Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Llove/forte/simbot/common/id/ID;)I
	public synthetic fun copy ()Llove/forte/simbot/common/id/ID;
	public fun copy ()Llove/forte/simbot/common/id/StringID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getValue ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public static final fun valueOf (Ljava/lang/CharSequence;)Llove/forte/simbot/common/id/StringID;
	public static final fun valueOf (Ljava/lang/String;)Llove/forte/simbot/common/id/StringID;
}

public final class love/forte/simbot/common/id/StringID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (Ljava/lang/CharSequence;)Llove/forte/simbot/common/id/StringID;
	public final fun valueOf (Ljava/lang/String;)Llove/forte/simbot/common/id/StringID;
}

public final class love/forte/simbot/common/id/StringID$Serializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/id/StringID$Serializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/id/StringID;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/id/StringID;)V
}

public final class love/forte/simbot/common/id/UIntID : love/forte/simbot/common/id/UnsignedNumericID {
	public static final field Companion Llove/forte/simbot/common/id/UIntID$Companion;
	public synthetic fun <init> (ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun copy ()Llove/forte/simbot/common/id/ID;
	public fun copy ()Llove/forte/simbot/common/id/UIntID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getValue ()I
	public fun hashCode ()I
	public fun toByte ()B
	public fun toDouble ()D
	public fun toFloat ()F
	public fun toInt ()I
	public fun toLong ()J
	public fun toShort ()S
	public fun toString ()Ljava/lang/String;
	public fun toUInt-pVg5ArA ()I
	public static final fun valueOf (I)Llove/forte/simbot/common/id/UIntID;
}

public final class love/forte/simbot/common/id/UIntID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (I)Llove/forte/simbot/common/id/UIntID;
}

public final class love/forte/simbot/common/id/ULongID : love/forte/simbot/common/id/UnsignedNumericID {
	public static final field Companion Llove/forte/simbot/common/id/ULongID$Companion;
	public synthetic fun <init> (JLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun copy ()Llove/forte/simbot/common/id/ID;
	public fun copy ()Llove/forte/simbot/common/id/ULongID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getValue ()J
	public fun hashCode ()I
	public fun toByte ()B
	public fun toDouble ()D
	public fun toFloat ()F
	public fun toInt ()I
	public fun toLong ()J
	public fun toShort ()S
	public fun toString ()Ljava/lang/String;
	public fun toULong-s-VKNKU ()J
	public static final fun valueOf (J)Llove/forte/simbot/common/id/ULongID;
}

public final class love/forte/simbot/common/id/ULongID$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (J)Llove/forte/simbot/common/id/ULongID;
}

public final class love/forte/simbot/common/id/UUID : love/forte/simbot/common/id/ID {
	public static final field Companion Llove/forte/simbot/common/id/UUID$Companion;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Llove/forte/simbot/common/id/ID;)I
	public fun copy ()Llove/forte/simbot/common/id/ID;
	public fun equals (Ljava/lang/Object;)Z
	public fun equalsExact (Ljava/lang/Object;)Z
	public final fun getLeastSignificantBits ()J
	public final fun getMostSignificantBits ()J
	public fun hashCode ()I
	public static final fun random ()Llove/forte/simbot/common/id/UUID;
	public static final fun random (Lkotlin/random/Random;)Llove/forte/simbot/common/id/UUID;
	public fun toString ()Ljava/lang/String;
	public static final fun valueOf (JJ)Llove/forte/simbot/common/id/UUID;
	public static final fun valueOf (Ljava/lang/String;)Llove/forte/simbot/common/id/UUID;
	public static final fun valueOf ([B)Llove/forte/simbot/common/id/UUID;
}

public final class love/forte/simbot/common/id/UUID$Companion {
	public final fun random ()Llove/forte/simbot/common/id/UUID;
	public final fun random (Lkotlin/random/Random;)Llove/forte/simbot/common/id/UUID;
	public static synthetic fun random$default (Llove/forte/simbot/common/id/UUID$Companion;Lkotlin/random/Random;ILjava/lang/Object;)Llove/forte/simbot/common/id/UUID;
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
	public final fun valueOf (JJ)Llove/forte/simbot/common/id/UUID;
	public final fun valueOf (Ljava/lang/String;)Llove/forte/simbot/common/id/UUID;
	public final fun valueOf ([B)Llove/forte/simbot/common/id/UUID;
}

public final class love/forte/simbot/common/id/UUID$Serializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/id/UUID$Serializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/id/UUID;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/id/UUID;)V
}

public final class love/forte/simbot/common/id/UUID$StructureSerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/id/UUID$StructureSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Llove/forte/simbot/common/id/UUID;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Llove/forte/simbot/common/id/UUID;)V
}

public final class love/forte/simbot/common/id/UUIDJvmKt {
	public static final fun getJavaUUID (Llove/forte/simbot/common/id/UUID;)Ljava/util/UUID;
	public static final fun getSimbotUUID (Ljava/util/UUID;)Llove/forte/simbot/common/id/UUID;
	public static final fun randomUUID (Ljava/util/Random;)Llove/forte/simbot/common/id/UUID;
}

public final class love/forte/simbot/common/id/UUIDsKt {
	public static final fun checkRadix (I)I
	public static final fun toLong (Ljava/lang/String;III)J
	public static final fun toUUIDSigs (Ljava/lang/String;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;
}

public abstract class love/forte/simbot/common/id/UnsignedNumericID : love/forte/simbot/common/id/NumericalID {
}

public final class love/forte/simbot/common/serialization/Base64BytesSerializer : kotlinx/serialization/KSerializer {
	public static final field INSTANCE Llove/forte/simbot/common/serialization/Base64BytesSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)[B
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;[B)V
}

public final class love/forte/simbot/common/serialization/GuessSerializerKt {
	public static final fun guessSerializer (Ljava/lang/Object;Lkotlinx/serialization/modules/SerializersModule;)Lkotlinx/serialization/KSerializer;
}

public final class love/forte/simbot/common/services/Services {
	public static final field INSTANCE Llove/forte/simbot/common/services/Services;
	public static final fun addProvider (Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function0;)V
	public static final fun clearProviders (Lkotlin/reflect/KClass;)V
	public static final fun loadProviders (Lkotlin/reflect/KClass;)Lkotlin/sequences/Sequence;
}

public final class love/forte/simbot/common/services/ServicesKt {
	public static final fun addProvider (Llove/forte/simbot/common/services/Services;ZLkotlin/reflect/KClass;Lkotlin/jvm/functions/Function0;)V
	public static final fun addProviderExceptJvm (Llove/forte/simbot/common/services/Services;Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function0;)V
}

public final class love/forte/simbot/common/services/Services_jvmKt {
	public static final fun isJvm ()Z
}

public final class love/forte/simbot/common/text/StringsKt {
	public static final fun toHex ([B)Ljava/lang/String;
}

public final class love/forte/simbot/common/time/InstantTimestamp : java/io/Serializable, love/forte/simbot/common/time/Timestamp {
	public static final field Companion Llove/forte/simbot/common/time/InstantTimestamp$Companion;
	public synthetic fun <init> (Ljava/time/Instant;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getInstant ()Ljava/time/Instant;
	public fun getMilliseconds ()J
	public fun hashCode ()I
	public static final fun of (Ljava/time/Instant;)Llove/forte/simbot/common/time/InstantTimestamp;
	public fun timeAs (Ljava/util/concurrent/TimeUnit;)J
	public fun toString ()Ljava/lang/String;
}

public final class love/forte/simbot/common/time/InstantTimestamp$Companion {
	public final fun of (Ljava/time/Instant;)Llove/forte/simbot/common/time/InstantTimestamp;
}

public final class love/forte/simbot/common/time/JavaDurationsKt {
	public static final synthetic fun getJava-LRDsOJo (J)Ljava/time/Duration;
	public static final synthetic fun getJavaOrNull-LRDsOJo (J)Ljava/time/Duration;
	public static final synthetic fun getKotlin (Ljava/time/Duration;)J
	public static final fun java-VtjQ1oo (JLkotlin/jvm/functions/Function1;)Ljava/time/Duration;
	public static synthetic fun java-VtjQ1oo$default (JLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/time/Duration;
}

public final class love/forte/simbot/common/time/MillisecondTimestamp : love/forte/simbot/common/time/Timestamp {
	public fun <init> (J)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getMilliseconds ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class love/forte/simbot/common/time/Timestamp : java/lang/Comparable {
	public static final field Companion Llove/forte/simbot/common/time/Timestamp$Companion;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Llove/forte/simbot/common/time/Timestamp;)I
	public abstract fun getMilliseconds ()J
	public static fun ofMilliseconds (J)Llove/forte/simbot/common/time/Timestamp;
	public fun timeAs (Ljava/util/concurrent/TimeUnit;)J
}

public final class love/forte/simbot/common/time/Timestamp$Companion {
	public final fun ofMilliseconds (J)Llove/forte/simbot/common/time/Timestamp;
}

public final class love/forte/simbot/common/weak/NonWeakRefImpl : love/forte/simbot/common/weak/WeakRef {
	public fun <init> (Ljava/lang/Object;)V
	public fun clear ()V
	public fun getValue ()Ljava/lang/Object;
	public fun setValue (Ljava/lang/Object;)V
}

public abstract interface class love/forte/simbot/common/weak/WeakRef {
	public abstract fun clear ()V
	public abstract fun getValue ()Ljava/lang/Object;
}

public final class love/forte/simbot/common/weak/WeakRefKt {
	public static final fun getValue (Llove/forte/simbot/common/weak/WeakRef;Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/Object;
}

public final class love/forte/simbot/common/weak/WeakRef_jvmKt {
	public static final fun weakRef (Ljava/lang/Object;)Llove/forte/simbot/common/weak/WeakRef;
}

